# -*- coding: utf-8 -*-
"""tr_6_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ilExkeRLgyFAe2p5wCJmWDJF-VG3CSG

A. Префиксные суммы
"""

lines=open('input.txt','r').readlines()
arr=lines[1].split()
arr=list(map(int,arr))

n=len(arr)
pr=[0]*(n+1)
for i in range(1,n+1):
    pr[i]=pr[i-1]+arr[i-1]
del pr[0]
print(*pr)

"""B. Сумма номеров"""

lines=open('input.txt','r').readlines()
n,k=list(map(int,lines[0].split()))
nums=lines[1].split()
nums=list(map(int,nums))

pr=0
dt={0:-1}
count=0

for i in range(n):
    pr+=nums[i]
    if pr not in dt:
        dt[pr]=i
    if pr-k in dt:
        count+=1

print(count)

"""C. Город Че"""

lines=open('input.txt','r').readlines()
n,k=list(map(int,lines[0].split()))
nums=lines[1].split()
nums=list(map(int,nums))

ans=0

r=0
for l in range(n):
    while r<n-1 and nums[r]-nums[l]<=k:
        r+=1
    if nums[r]-nums[l]>k:
        ans+= n-r

print(ans)

"""D. Лучший отдых"""

lines=open('input.txt','r').readlines()
n,k=list(map(int,lines[0].split()))
nums=lines[1].split()
nums=list(map(int,nums))
nums=sorted(nums)

st=set()
ans=0

r=0
for l in range(n):
    while r<n-1 and (nums[r]-nums[l]<=k or (nums[r],r) in st):
        r+=1
    if nums[r]-nums[l]>k:
        st.add((nums[r],r))

    if (nums[l],l) not in st:
        ans+=1

# print(nums)
print(ans)

"""E. Удаление медиан"""

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))
nums=lines[1].split()
nums=list(map(int,nums))
nums=sorted(nums)

res=[]

while nums:
    if len(nums)%2 != 0:
        res.append(nums.pop((len(nums)-1)//2))
    else:
        a=(len(nums)-1)//2
        b=(len(nums)-1)//2+1
        if nums[a]<nums[b]:
            res.append(nums.pop(a))
        else:
            res.append(nums.pop(b))
print(*res)

"""F. Сумма тройных произведений"""

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))
nums=lines[1].split()
nums=list(map(int,nums))

a_1=nums
a_2=[num**2 for num in nums]
a_3=[num**3 for num in nums]

s_1,s_2,s_3=sum(a_1),sum(a_2),sum(a_3)
res=(s_1**3 - 3*s_2*s_1 + 2*s_3)//6
print(res%(1000000007))

"""G. Цензурное произведение"""

lines=open('input.txt','r').readlines()
n,c=list(map(int,lines[0].split()))
s=list(lines[1].strip())

count_a=0
count_b=0
rdn=0
ans=-10**9

r=0
for l in range(len(s)):
    while r<len(s) and rdn<=c:
        if s[r]=='a':
            count_a+=1
        elif s[r]=='b':
            count_b+=1
            rdn+=count_a
        if rdn<=c:
            ans=max(ans,r-l+1)
            r+=1
    if s[l]=='a':
        rdn-=count_b

print(ans)

lines=open('input.txt','r').readlines()
n,c=list(map(int,lines[0].split()))
s=list(lines[1].strip())

count_a=0
count_b=0
rdn=0
ans=-10**9

l=0
for r in range(len(s)):
    if s[r]=='a':
        count_a+=1
    elif s[r]=='b':
        count_b+=1
        rdn+=count_a
    while rdn>c:
        if s[l]=='a':
            rdn-=count_b
            count_a-=1
        elif s[l]=='b':
            count_b-=1
        l+=1
    ans=max(ans,r-l+1)

print(ans)

"""H. Переезд в опенспейс"""

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))[0]
nums=lines[1].split()
nums=list(map(int,nums))

def find_min_slow(nums):
    dist=[]
    for j in range(len(nums)):
        sm=0
        for i in range(len(nums)):
            sm+=nums[i]*abs(i-j)
        dist.append(sm)

    # print(dist)
    return min(dist)

def find_min(nums):
    pr=[0]*len(nums)
    sf=[0]*len(nums)
    for i in range(1,len(nums)):
        pr[i]=pr[i-1]+nums[i-1]
    for i in range(len(nums)-1,0,-1):
        sf[i-1]=sf[i]+nums[i]

    sum_pr=[0]*(len(nums)+1)
    sum_sf=[0]*(len(nums)+1)
    for i in range(1,len(pr)+1):
        sum_pr[i]=sum_pr[i-1]+pr[i-1]
    for i in range(len(sf)-1,-1,-1):
        sum_sf[i]=sum_sf[i+1]+sf[i]
    del sum_pr[0]
    del sum_sf[-1]


    dist=[0]*len(nums)
    for i in range(len(nums)):
        dist[i]=sum_pr[i]+sum_sf[i]
    # print(dist)

    return min(dist)

find_min_slow(nums)
print(find_min(nums))

import random

def test_functions():
    num_tests = 10
    max_n = 100
    max_value = 10**9

    for _ in range(num_tests):
        n = random.randint(1, max_n)
        nums = [random.randint(1, max_value) for _ in range(n)]

        result_slow = find_min_slow(nums)
        result_fast = find_min(nums)

        if result_slow != result_fast:
            print(f"Ошибка. Разные результаты на массиве {nums}")
            print(f"find_min_slow: {result_slow}, find_min: {result_fast}")
            return False

    print("Все тесты пройдены успешно.")
    return True

test_functions()

"""I. Изучение алгоритмов"""

import sys

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))[0]
a=list(map(int,lines[1].split()))
b=list(map(int,lines[2].split()))
p=list(map(int,lines[3].split()))

def find_ord_slow(a, b, p):
    algs = [(i, (a[i], b[i])) for i in range(len(a))]
    n = len(algs)
    used = [False] * n
    ans = []

    def find_max(algs, nastr, used):
        pairs = [(i, pair) for i, pair in algs if not used[i]]
        if nastr == 0:
            max_a = max(pair[0] for _, pair in pairs)
            top = [(i, pair) for i, pair in pairs if pair[0] == max_a]
            max_b = max(pair[1] for _, pair in top)
            result = min((i, pair) for i, pair in top if pair[1] == max_b)
            return result[0]

        elif nastr == 1:
            max_b = max(pair[1] for _, pair in pairs)
            top = [(i, pair) for i, pair in pairs if pair[1] == max_b]
            max_a = max(pair[0] for _, pair in top)
            result = min((i, pair) for i, pair in top if pair[0] == max_a)
            return result[0]

    for i in range(n):
        max_index = find_max(algs, p[i], used)
        used[max_index] = True
        ans.append(algs[max_index][0]+1)

    return ans


def find_ord(a,b,p):
    pairs=[ (i,a[i],b[i]) for i in range(len(a)) ]
    a=sorted(pairs, key=lambda x: (x[1],x[2],-x[0]),reverse=True )
    b=sorted(pairs, key=lambda x: (x[2],x[1],-x[0]),reverse=True )

    used=[False]*len(a)
    res=[]

    I,J=0,0

    for i in range(len(p)):
        if p[i]==0:
            while used[a[I][0]]==True:
                I+=1
            res.append(a[I][0]+1)
            used[a[I][0]]=True
            I+=1
        elif p[i]==1:
            while used[b[J][0]]==True:
                J+=1
            res.append(b[J][0]+1)
            used[b[J][0]]=True
            J+=1

    return res


print(*find_ord(a,b,p))

import random

def test_functions():
    num_tests = 5000
    max_n = 100
    max_value = 10**9

    for _ in range(num_tests):
        n = random.randint(1, max_n)
        a = [random.randint(1, max_value) for _ in range(n)]
        b = [random.randint(1, max_value) for _ in range(n)]
        p = [random.randint(0, 1) for _ in range(n)]

        result_slow = find_ord_slow(a,b,p)
        result_fast = find_ord(a,b,p)

        if result_slow != result_fast:
            print(f"Ошибка. Разные результаты на массивах {a}, {b}, {p}")
            print(f"find_min_slow: {result_slow}, find_min: {result_fast}")
            return False

    print("Все тесты пройдены успешно.")
    return True

test_functions()

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))[0]
a=list(map(int,lines[1].split()))
b=list(map(int,lines[2].split()))
p=list(map(int,lines[3].split()))



pairs=[ (i,a[i],b[i]) for i in range(len(a)) ]
a=sorted(pairs, key=lambda x: (x[1],x[2],-x[0]),reverse=True )
b=sorted(pairs, key=lambda x: (x[2],x[1],-x[0]),reverse=True )

used=[False]*len(a)

I,J=0,0

for i in range(len(p)):
    if p[i]==0:
        while used[a[I][0]]==True:
            I+=1
        print(a[I][0]+1, end=' ')
        used[a[I][0]]=True
        I+=1
    elif p[i]==1:
        while used[b[J][0]]==True:
            J+=1
        print(b[J][0]+1, end=' ')
        used[b[J][0]]=True
        J+=1

"""J. Исследование улик"""

lines=open('input.txt','r').readlines()
n=list(map(int,lines[0].split()))[0]
a=list(map(int,lines[1].split()))
m,k=list(map(int,lines[2].split()))
x=list(map(int,lines[3].split()))


def sol_slow(a,m,k,x):
    def find_ind(a,m,k,req):
        if len(a)==1:
            return 1
        count=0
        for i in range(req-1,0,-1):
            if a[i-1]>a[i]:
                return i+1
            if a[i-1]==a[i]:
                count+=1
            if count>k:
                return i+1
        return 1

    res=[]
    for i in range(len(x)):
        res.append(find_ind(a,m,k,x[i]))
    return res


def sol(a,m,k,x):
    res_all=[1]*len(a)
    count=0
    l=0
    for r in range(1,len(a)):
        if a[r]<a[r-1]:
            l=r
            res_all[r]=l+1
            count=0
        else:
            if a[r]==a[r-1]:
                count+=1
            if count>k:
                while count>k:
                    if a[l]==a[l+1]:
                        count-=1
                    l+=1
                res_all[r]=l+1
            else:
                res_all[r]=l+1
    res=[res_all[req-1] for req in x]
    return res

# print(*sol_slow(a,m,k,x))
print(*sol(a,m,k,x))

import random

def test_functions():
    num_tests = 1000
    max_n = 100
    max_value = 10**9

    for _ in range(num_tests):
        n = random.randint(1, max_n)
        k = random.randint(0, n)
        len_x = random.randint(1, max_n)
        a = [random.randint(1, max_value) for _ in range(n)]
        x = [random.randint(1, n) for _ in range(len_x)]

        result_slow = sol_slow(a,m,k,x)
        result_fast = sol(a,m,k,x)


        if result_slow != result_fast:
            # print(f"Ошибка. Разные результаты на массивах {a}, {b}, {p}")
            print(f"find_min_slow: {result_slow}, find_min: {result_fast}")
            return False

    print("Все тесты пройдены успешно.")
    return True

test_functions()