# -*- coding: utf-8 -*-
"""tr_6_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Y0vlASNsvToPkFutLOCBWWic5Gnr3r4

1. Плот
"""

lines=open('input.txt','r').readlines()
for i in range(len(lines)):
    lines[i]=int(lines[i].strip())
x1,y1=lines[0],lines[1]
x2,y2=lines[2],lines[3]
x,y=lines[4],lines[5]

def pos_x(x):
    if x<x1:
        return 'W'
    elif x1<x<x2:
        return ''
    elif x>x2:
        return 'E'

def pos_y(x):
    if y<y1:
        return 'S'
    elif y1<y<y2:
        return ''
    elif y>y2:
        return 'N'

print(pos_y(y)+pos_x(x))

"""2. Майки и носки"""

lines=open('input.txt','r').readlines()
for i in range(len(lines)):
    lines[i]=int(lines[i].strip())

A,B,C,D=lines

res=[]

if (A==0 and C==0) or (B==0 and D==0):
    if A==0:
        res.append([1,1])
    elif B==0:
        res.append([1,1])
elif A==0 or B==0:
    if A==0:
        res.append([1,C+1])
    if B==0:
        res.append([1,D+1])
elif C==0 or D==0:
    if C==0:
        res.append([A+1,1])
    if D==0:
        res.append([B+1,1])
# Случай с нулями разобран
else:
    res.append([max(A,B)+1,1])
    res.append([1,max(C,D)+1])
    res.append([min(A,B)+1, D+1 if B<A else C+1 ])
    res.append([B+1 if D<C else A+1 ,min(C,D)+1])

sums=[m+n for m,n in res]
ind_min=sums.index(min(sums))

print(res)
print(sums)
print(ind_min)

print(*res[ind_min])

"""3. Надпись на табло"""

lines=open('input.txt','r').readlines()
del lines[0]
lines=[line.strip() for line in lines]
board=[list(line) for line in lines]

def det_let(board):
    n=len(board)

    def board_cut(board):
        x_min,y_min,x_max,y_max=10**3,10**3,-10**3,-10**3
        for y in range(n):
            for x in range(n):
                if board[y][x]=='#':
                    x_min,y_min=min(x_min,x),min(y_min,y) # левая верхняя точка
                    x_max,y_max=max(x_max,x),max(y_max,y) # правая нижняя точка
        new_board=[[board[i][j] for j in range(x_min,x_max+1)] for i in range(y_min,y_max+1)]
        return new_board

    def in_board(x,y,new_board):
        return 0<=x<=len(new_board[0])-1 and 0<=y<=len(new_board)-1

    new_board=board_cut(board)
    if not new_board:
        return 'X'
    w,h=len(new_board[0]),len(new_board)


    used=[[False for j in range(w)] for i in range(h)]
    dx=[-1,1,0,0]
    dy=[0,0,-1,1]
    def dfs(used,new_board,x,y, comp):
        if in_board(x,y,new_board)==True and used[y][x]==False and new_board[y][x]=='.':
            comp.append([x,y])
            used[y][x]=True
            for i in range(4):
                dfs(used,new_board,x+dx[i],y+dy[i],comp)
        return comp

    comps=[] # список для связных компонент
    for y in range(h):
        for x in range(w):
            if new_board[y][x]=='.' and used[y][x]==False:
                comps.append(dfs(used,new_board,x,y,[]))

    if not comps:
        return 'I'

    def is_rec(arr: list[list]) -> bool:
        x_min,y_min,x_max,y_max=10**3,10**3,-10**3,-10**3
        for i in range(len(arr)):
            x,y=arr[i][0],arr[i][1]
            x_min,y_min=min(x_min,x),min(y_min,y)
            x_max,y_max=max(x_max,x),max(y_max,y)
        return (x_max-x_min+1)*(y_max-y_min+1) == len(arr)

    if len(comps)>2:
        return 'X'

    for i in range(len(comps)):
        if not is_rec(comps[i]):
            return 'X' # остается только вариант с одним или двуми прямоугольниками

    def get_angles(arr):
        x_min,y_min,x_max,y_max=10**3,10**3,-10**3,-10**3
        for i in range(len(arr)):
            x,y=arr[i][0],arr[i][1]
            x_min,y_min=min(x_min,x),min(y_min,y)
            x_max,y_max=max(x_max,x),max(y_max,y)
        return (x_min,y_max), (x_max,y_min)

    if len(comps)==1:
        x1=get_angles(comps[0])[0][0]
        y1=h-1-get_angles(comps[0])[0][1]

        x2=get_angles(comps[0])[1][0]
        y2=h-1-get_angles(comps[0])[1][1]

        # (x1<x2 and y1<y2)
        if (x1>0 and x2<w-1) and (y1>0 and y2<h-1):
            return 'O'
        if (x1>0 and x2==w-1) and (y1>0 and y2<h-1):
            return 'C'
        if (x1>0 and x2==w-1) and (y1>0 and y2==h-1):
            return 'L'
        return 'X'

    if len(comps)==2:
        x1=get_angles(comps[0])[0][0]
        y1=h-1-get_angles(comps[0])[0][1]

        x2=get_angles(comps[0])[1][0]
        y2=h-1-get_angles(comps[0])[1][1]

        x3=get_angles(comps[1])[0][0]
        y3=h-1-get_angles(comps[1])[0][1]

        x4=get_angles(comps[1])[1][0]
        y4=h-1-get_angles(comps[1])[1][1]


        # and (x1<x2 and y1<y2) and (x3<x4 and y3<y4)
        if (0<x1<w-1 and 0<x2<w-1) and (0<x3<w-1 and 0<x4<w-1) and (x1==x3 and x2==x4) and (0<y1 and y2==h-1) and (y3==0 and y4<h-1) and y1>y4:
            return 'H'
        if (0<x1<w-1 and 0<x2<w-1) and (0<x3<w-1 and x4==w-1) and (x1==x3) and (0<y1<h-1 and 0<y2<h-1) and (y3==0 and y4<h-1) and y1>y4:
            return 'P'
        return 'X'

print(det_let(board))